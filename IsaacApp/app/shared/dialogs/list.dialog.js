"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var modal_dialog_1 = require("nativescript-angular/modal-dialog");
var ListDialog = /** @class */ (function () {
    function ListDialog(params) {
        this.params = params;
        this.items = this.params.context.items;
        this.title = this.params.context.title;
        this.key = this.params.context.key;
        this.searchBar = this.params.context.searchBar;
        this.minimized = this.params.context.minimized;
    }
    ListDialog.prototype.submit = function (result, item) {
        this.params.closeCallback({ result: result, data: item });
    };
    ListDialog.prototype.filterItems = function () {
        var filteredItems = [];
        console.log('filtering');
        if (this.phrase == "" || this.phrase == undefined) {
            filteredItems = this.items;
        }
        else {
            for (var i = 0; i < this.items.length; i++) {
                if (this.items[i][this.key].toUpperCase().indexOf(this.phrase.toUpperCase()) >= 0) {
                    filteredItems.push(this.items[i]);
                }
            }
        }
        return filteredItems;
    };
    ListDialog.prototype.onTextChanged = function (event) {
        this.filterItems();
    };
    ListDialog = __decorate([
        core_1.Component({
            selector: "modal-content",
            template: "\n    <StackLayout horizontalAlignment=\"center\" verticalAlignment=\"center\">\n\n        <Label [visibility]=\"title ? 'visible' : 'collapse' \" class=\"fancy-title-bar\" [text]=\"title\"></Label>\n\n        <SearchBar horizontalAlignment=\"center\" [visibility]=\"searchBar ? 'visible' : 'collapse' \" hint=\"Search...\" [(ngModel)]=\"phrase\" [text]=\"phrase\"></SearchBar>\n\n        <GridLayout [visibility]=\"minimized ? 'collapse' : 'visible'\" columns=\"*\" rows=\"*,auto\">\n            <ListView separatorColor=\"#ffffff\" row=0 col=0 [items]=\"filterItems()\">\n                <ng-template let-item=\"item\">\n                    <Label class=\"h4\" padding=5 (tap)=\"submit(true, item)\" text=\"{{ item[key] }}\"></Label>\n                </ng-template>\n            </ListView>\n            <GridLayout row=1 col=0 rows=\"auto\" columns=\"auto,*\">\n                <Button row=0 col=0 horizontalALignment=\"left\" width=100  class=\"btn-primary fancy-button\" text=\"cancel\" (tap)=\"submit(false, {})\"></Button>\n                <Label row=0 col=1 text=\"\"></Label>\n            </GridLayout>\n        </GridLayout>\n\n        <StackLayout [visibility]=\"minimized ? 'visible' : 'collapse'\" class=\"\" width=240>\n            <StackLayout *ngFor=\"let item of items\">\n                    <StackLayout (tap)=\"submit(true, item)\">\n                        <Label horizontalAlignment=\"center\" class=\"fancy-list-item container-small\" text=\"{{ item[key] }}\"></Label>\n                    </StackLayout>\n            </StackLayout>\n        </StackLayout>\n        \n    </StackLayout>\n  "
        }),
        __metadata("design:paramtypes", [modal_dialog_1.ModalDialogParams])
    ], ListDialog);
    return ListDialog;
}());
exports.ListDialog = ListDialog;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5kaWFsb2cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsaXN0LmRpYWxvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUEwQztBQUMxQyxrRUFBc0U7QUFrQ3RFO0lBU0ksb0JBQW9CLE1BQXlCO1FBQXpCLFdBQU0sR0FBTixNQUFNLENBQW1CO1FBQ3pDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQ25DLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQy9DLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQ25ELENBQUM7SUFFRCwyQkFBTSxHQUFOLFVBQU8sTUFBTSxFQUFFLElBQVM7UUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUUsRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBRSxDQUFDO0lBQzdELENBQUM7SUFFRCxnQ0FBVyxHQUFYO1FBQ0ksSUFBSSxhQUFhLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDekIsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQy9DLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQy9CLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDekMsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMvRSxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEMsQ0FBQztZQUNMLENBQUM7UUFDTCxDQUFDO1FBQ0QsTUFBTSxDQUFDLGFBQWEsQ0FBQztJQUN6QixDQUFDO0lBRUQsa0NBQWEsR0FBYixVQUFjLEtBQUs7UUFDZixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQXRDUSxVQUFVO1FBaEN0QixnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLGVBQWU7WUFDekIsUUFBUSxFQUFFLCtrREE0Qlg7U0FDRixDQUFDO3lDQVU4QixnQ0FBaUI7T0FUcEMsVUFBVSxDQXdDdEI7SUFBRCxpQkFBQztDQUFBLEFBeENELElBd0NDO0FBeENZLGdDQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE1vZGFsRGlhbG9nUGFyYW1zIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1hbmd1bGFyL21vZGFsLWRpYWxvZ1wiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJtb2RhbC1jb250ZW50XCIsXG4gICAgdGVtcGxhdGU6IGBcbiAgICA8U3RhY2tMYXlvdXQgaG9yaXpvbnRhbEFsaWdubWVudD1cImNlbnRlclwiIHZlcnRpY2FsQWxpZ25tZW50PVwiY2VudGVyXCI+XG5cbiAgICAgICAgPExhYmVsIFt2aXNpYmlsaXR5XT1cInRpdGxlID8gJ3Zpc2libGUnIDogJ2NvbGxhcHNlJyBcIiBjbGFzcz1cImZhbmN5LXRpdGxlLWJhclwiIFt0ZXh0XT1cInRpdGxlXCI+PC9MYWJlbD5cblxuICAgICAgICA8U2VhcmNoQmFyIGhvcml6b250YWxBbGlnbm1lbnQ9XCJjZW50ZXJcIiBbdmlzaWJpbGl0eV09XCJzZWFyY2hCYXIgPyAndmlzaWJsZScgOiAnY29sbGFwc2UnIFwiIGhpbnQ9XCJTZWFyY2guLi5cIiBbKG5nTW9kZWwpXT1cInBocmFzZVwiIFt0ZXh0XT1cInBocmFzZVwiPjwvU2VhcmNoQmFyPlxuXG4gICAgICAgIDxHcmlkTGF5b3V0IFt2aXNpYmlsaXR5XT1cIm1pbmltaXplZCA/ICdjb2xsYXBzZScgOiAndmlzaWJsZSdcIiBjb2x1bW5zPVwiKlwiIHJvd3M9XCIqLGF1dG9cIj5cbiAgICAgICAgICAgIDxMaXN0VmlldyBzZXBhcmF0b3JDb2xvcj1cIiNmZmZmZmZcIiByb3c9MCBjb2w9MCBbaXRlbXNdPVwiZmlsdGVySXRlbXMoKVwiPlxuICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSBsZXQtaXRlbT1cIml0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgPExhYmVsIGNsYXNzPVwiaDRcIiBwYWRkaW5nPTUgKHRhcCk9XCJzdWJtaXQodHJ1ZSwgaXRlbSlcIiB0ZXh0PVwie3sgaXRlbVtrZXldIH19XCI+PC9MYWJlbD5cbiAgICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgPC9MaXN0Vmlldz5cbiAgICAgICAgICAgIDxHcmlkTGF5b3V0IHJvdz0xIGNvbD0wIHJvd3M9XCJhdXRvXCIgY29sdW1ucz1cImF1dG8sKlwiPlxuICAgICAgICAgICAgICAgIDxCdXR0b24gcm93PTAgY29sPTAgaG9yaXpvbnRhbEFMaWdubWVudD1cImxlZnRcIiB3aWR0aD0xMDAgIGNsYXNzPVwiYnRuLXByaW1hcnkgZmFuY3ktYnV0dG9uXCIgdGV4dD1cImNhbmNlbFwiICh0YXApPVwic3VibWl0KGZhbHNlLCB7fSlcIj48L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8TGFiZWwgcm93PTAgY29sPTEgdGV4dD1cIlwiPjwvTGFiZWw+XG4gICAgICAgICAgICA8L0dyaWRMYXlvdXQ+XG4gICAgICAgIDwvR3JpZExheW91dD5cblxuICAgICAgICA8U3RhY2tMYXlvdXQgW3Zpc2liaWxpdHldPVwibWluaW1pemVkID8gJ3Zpc2libGUnIDogJ2NvbGxhcHNlJ1wiIGNsYXNzPVwiXCIgd2lkdGg9MjQwPlxuICAgICAgICAgICAgPFN0YWNrTGF5b3V0ICpuZ0Zvcj1cImxldCBpdGVtIG9mIGl0ZW1zXCI+XG4gICAgICAgICAgICAgICAgICAgIDxTdGFja0xheW91dCAodGFwKT1cInN1Ym1pdCh0cnVlLCBpdGVtKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsIGhvcml6b250YWxBbGlnbm1lbnQ9XCJjZW50ZXJcIiBjbGFzcz1cImZhbmN5LWxpc3QtaXRlbSBjb250YWluZXItc21hbGxcIiB0ZXh0PVwie3sgaXRlbVtrZXldIH19XCI+PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPC9TdGFja0xheW91dD5cbiAgICAgICAgICAgIDwvU3RhY2tMYXlvdXQ+XG4gICAgICAgIDwvU3RhY2tMYXlvdXQ+XG4gICAgICAgIFxuICAgIDwvU3RhY2tMYXlvdXQ+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTGlzdERpYWxvZyB7XG5cbiAgICBwdWJsaWMga2V5OiBzdHJpbmc7XG4gICAgcHVibGljIGl0ZW1zOiBhbnk7XG4gICAgcHVibGljIHRpdGxlOiBzdHJpbmc7XG4gICAgcHVibGljIHNlYXJjaEJhcjogYm9vbGVhbjtcbiAgICBwdWJsaWMgcGhyYXNlOiBzdHJpbmc7XG4gICAgcHVibGljIG1pbmltaXplZDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGFyYW1zOiBNb2RhbERpYWxvZ1BhcmFtcykge1xuICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5wYXJhbXMuY29udGV4dC5pdGVtcztcbiAgICAgICAgdGhpcy50aXRsZSA9IHRoaXMucGFyYW1zLmNvbnRleHQudGl0bGU7XG4gICAgICAgIHRoaXMua2V5ID0gdGhpcy5wYXJhbXMuY29udGV4dC5rZXk7XG4gICAgICAgIHRoaXMuc2VhcmNoQmFyID0gdGhpcy5wYXJhbXMuY29udGV4dC5zZWFyY2hCYXI7XG4gICAgICAgIHRoaXMubWluaW1pemVkID0gdGhpcy5wYXJhbXMuY29udGV4dC5taW5pbWl6ZWQ7XG4gICAgfVxuXG4gICAgc3VibWl0KHJlc3VsdCwgaXRlbTogYW55KSB7XG4gICAgICAgIHRoaXMucGFyYW1zLmNsb3NlQ2FsbGJhY2soIHtyZXN1bHQ6cmVzdWx0LCBkYXRhOiBpdGVtfSApO1xuICAgIH1cblxuICAgIGZpbHRlckl0ZW1zKCkge1xuICAgICAgICBsZXQgZmlsdGVyZWRJdGVtcyA9IFtdO1xuICAgICAgICBjb25zb2xlLmxvZygnZmlsdGVyaW5nJyk7XG4gICAgICAgIGlmKHRoaXMucGhyYXNlID09IFwiXCIgfHwgdGhpcy5waHJhc2UgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmaWx0ZXJlZEl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuaXRlbXNbaV1bdGhpcy5rZXldLnRvVXBwZXJDYXNlKCkuaW5kZXhPZih0aGlzLnBocmFzZS50b1VwcGVyQ2FzZSgpKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkSXRlbXMucHVzaCh0aGlzLml0ZW1zW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkSXRlbXM7XG4gICAgfVxuXG4gICAgb25UZXh0Q2hhbmdlZChldmVudCkge1xuICAgICAgICB0aGlzLmZpbHRlckl0ZW1zKCk7XG4gICAgfVxuXG59XG4iXX0=