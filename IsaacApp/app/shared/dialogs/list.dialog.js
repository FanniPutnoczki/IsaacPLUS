"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var modal_dialog_1 = require("nativescript-angular/modal-dialog");
var ListDialog = /** @class */ (function () {
    function ListDialog(params) {
        this.params = params;
        this.items = this.params.context.items;
        this.title = this.params.context.title;
        this.key = this.params.context.key;
        this.searchBar = this.params.context.searchBar;
        this.minimized = this.params.context.minimized;
    }
    ListDialog.prototype.submit = function (result, item) {
        this.params.closeCallback({ result: result, data: item });
    };
    ListDialog.prototype.filterItems = function () {
        var filteredItems = [];
        console.log('filtering');
        if (this.phrase == "" || this.phrase == undefined) {
            filteredItems = this.items;
        }
        else {
            for (var i = 0; i < this.items.length; i++) {
                if (this.items[this.key][i].toUpperCase().indexOf(this.phrase.toUpperCase()) >= 0) {
                    filteredItems.push(this.items[this.key][i]);
                }
            }
        }
        return filteredItems;
    };
    ListDialog.prototype.onTextChanged = function (event) {
        this.filterItems();
    };
    ListDialog = __decorate([
        core_1.Component({
            selector: "modal-content",
            template: "\n    <StackLayout horizontalAlignment=\"center\" verticalAlignment=\"center\">\n\n        <Label [visibility]=\"title ? 'visible' : 'collapse' \" class=\"fancy-title-bar\" [text]=\"title\"></Label>\n\n        <SearchBar horizontalAlignment=\"center\" [visibility]=\"searchBar ? 'visible' : 'collapse' \" hint=\"Search...\" [(ngModel)]=\"phrase\" [text]=\"phrase\"></SearchBar>\n\n        <GridLayout [visibility]=\"minimized ? 'collapse' : 'visible'\" columns=\"*\" rows=\"*,auto\">\n            <ListView separatorColor=\"#ffffff\" row=0 col=0 [items]=\"filterItems()\">\n                <ng-template let-item=\"item\">\n                    <Label class=\"fancy-list-item\" (tap)=\"submit(true, item)\" text=\"{{ item[key] }}\"></Label>\n                </ng-template>\n            </ListView>\n            <GridLayout row=1 col=0 rows=\"auto\" columns=\"auto,*\">\n                <Button row=0 col=0 horizontalALignment=\"left\" width=100  class=\"btn-primary fancy-button\" text=\"cancel\" (tap)=\"submit(false, {})\"></Button>\n                <Label row=0 col=1 text=\"\"></Label>\n            </GridLayout>\n        </GridLayout>\n\n        <StackLayout [visibility]=\"minimized ? 'visible' : 'collapse'\" class=\"\" width=240>\n            <StackLayout *ngFor=\"let item of items\">\n                    <StackLayout (tap)=\"submit(true, item)\">\n                        <Label horizontalAlignment=\"center\" class=\"fancy-list-item container-small\" text=\"{{ item[key] }}\"></Label>\n                    </StackLayout>\n            </StackLayout>\n        </StackLayout>\n        \n    </StackLayout>\n  "
        }),
        __metadata("design:paramtypes", [modal_dialog_1.ModalDialogParams])
    ], ListDialog);
    return ListDialog;
}());
exports.ListDialog = ListDialog;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5kaWFsb2cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsaXN0LmRpYWxvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUEwQztBQUMxQyxrRUFBc0U7QUFrQ3RFO0lBU0ksb0JBQW9CLE1BQXlCO1FBQXpCLFdBQU0sR0FBTixNQUFNLENBQW1CO1FBQ3pDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQ25DLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQy9DLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQ25ELENBQUM7SUFFRCwyQkFBTSxHQUFOLFVBQU8sTUFBTSxFQUFFLElBQVM7UUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUUsRUFBQyxNQUFNLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBRSxDQUFDO0lBQzdELENBQUM7SUFFRCxnQ0FBVyxHQUFYO1FBQ0ksSUFBSSxhQUFhLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDekIsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQy9DLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQy9CLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDekMsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMvRSxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hELENBQUM7WUFDTCxDQUFDO1FBQ0wsQ0FBQztRQUNELE1BQU0sQ0FBQyxhQUFhLENBQUM7SUFDekIsQ0FBQztJQUVELGtDQUFhLEdBQWIsVUFBYyxLQUFLO1FBQ2YsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUF0Q1EsVUFBVTtRQWhDdEIsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxlQUFlO1lBQ3pCLFFBQVEsRUFBRSxrbERBNEJYO1NBQ0YsQ0FBQzt5Q0FVOEIsZ0NBQWlCO09BVHBDLFVBQVUsQ0F3Q3RCO0lBQUQsaUJBQUM7Q0FBQSxBQXhDRCxJQXdDQztBQXhDWSxnQ0FBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBNb2RhbERpYWxvZ1BhcmFtcyB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9tb2RhbC1kaWFsb2dcIjtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwibW9kYWwtY29udGVudFwiLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgPFN0YWNrTGF5b3V0IGhvcml6b250YWxBbGlnbm1lbnQ9XCJjZW50ZXJcIiB2ZXJ0aWNhbEFsaWdubWVudD1cImNlbnRlclwiPlxuXG4gICAgICAgIDxMYWJlbCBbdmlzaWJpbGl0eV09XCJ0aXRsZSA/ICd2aXNpYmxlJyA6ICdjb2xsYXBzZScgXCIgY2xhc3M9XCJmYW5jeS10aXRsZS1iYXJcIiBbdGV4dF09XCJ0aXRsZVwiPjwvTGFiZWw+XG5cbiAgICAgICAgPFNlYXJjaEJhciBob3Jpem9udGFsQWxpZ25tZW50PVwiY2VudGVyXCIgW3Zpc2liaWxpdHldPVwic2VhcmNoQmFyID8gJ3Zpc2libGUnIDogJ2NvbGxhcHNlJyBcIiBoaW50PVwiU2VhcmNoLi4uXCIgWyhuZ01vZGVsKV09XCJwaHJhc2VcIiBbdGV4dF09XCJwaHJhc2VcIj48L1NlYXJjaEJhcj5cblxuICAgICAgICA8R3JpZExheW91dCBbdmlzaWJpbGl0eV09XCJtaW5pbWl6ZWQgPyAnY29sbGFwc2UnIDogJ3Zpc2libGUnXCIgY29sdW1ucz1cIipcIiByb3dzPVwiKixhdXRvXCI+XG4gICAgICAgICAgICA8TGlzdFZpZXcgc2VwYXJhdG9yQ29sb3I9XCIjZmZmZmZmXCIgcm93PTAgY29sPTAgW2l0ZW1zXT1cImZpbHRlckl0ZW1zKClcIj5cbiAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgbGV0LWl0ZW09XCJpdGVtXCI+XG4gICAgICAgICAgICAgICAgICAgIDxMYWJlbCBjbGFzcz1cImZhbmN5LWxpc3QtaXRlbVwiICh0YXApPVwic3VibWl0KHRydWUsIGl0ZW0pXCIgdGV4dD1cInt7IGl0ZW1ba2V5XSB9fVwiPjwvTGFiZWw+XG4gICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvTGlzdFZpZXc+XG4gICAgICAgICAgICA8R3JpZExheW91dCByb3c9MSBjb2w9MCByb3dzPVwiYXV0b1wiIGNvbHVtbnM9XCJhdXRvLCpcIj5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIHJvdz0wIGNvbD0wIGhvcml6b250YWxBTGlnbm1lbnQ9XCJsZWZ0XCIgd2lkdGg9MTAwICBjbGFzcz1cImJ0bi1wcmltYXJ5IGZhbmN5LWJ1dHRvblwiIHRleHQ9XCJjYW5jZWxcIiAodGFwKT1cInN1Ym1pdChmYWxzZSwge30pXCI+PC9CdXR0b24+XG4gICAgICAgICAgICAgICAgPExhYmVsIHJvdz0wIGNvbD0xIHRleHQ9XCJcIj48L0xhYmVsPlxuICAgICAgICAgICAgPC9HcmlkTGF5b3V0PlxuICAgICAgICA8L0dyaWRMYXlvdXQ+XG5cbiAgICAgICAgPFN0YWNrTGF5b3V0IFt2aXNpYmlsaXR5XT1cIm1pbmltaXplZCA/ICd2aXNpYmxlJyA6ICdjb2xsYXBzZSdcIiBjbGFzcz1cIlwiIHdpZHRoPTI0MD5cbiAgICAgICAgICAgIDxTdGFja0xheW91dCAqbmdGb3I9XCJsZXQgaXRlbSBvZiBpdGVtc1wiPlxuICAgICAgICAgICAgICAgICAgICA8U3RhY2tMYXlvdXQgKHRhcCk9XCJzdWJtaXQodHJ1ZSwgaXRlbSlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbCBob3Jpem9udGFsQWxpZ25tZW50PVwiY2VudGVyXCIgY2xhc3M9XCJmYW5jeS1saXN0LWl0ZW0gY29udGFpbmVyLXNtYWxsXCIgdGV4dD1cInt7IGl0ZW1ba2V5XSB9fVwiPjwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDwvU3RhY2tMYXlvdXQ+XG4gICAgICAgICAgICA8L1N0YWNrTGF5b3V0PlxuICAgICAgICA8L1N0YWNrTGF5b3V0PlxuICAgICAgICBcbiAgICA8L1N0YWNrTGF5b3V0PlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIExpc3REaWFsb2cge1xuXG4gICAgcHVibGljIGtleTogc3RyaW5nO1xuICAgIHB1YmxpYyBpdGVtczogYW55O1xuICAgIHB1YmxpYyB0aXRsZTogc3RyaW5nO1xuICAgIHB1YmxpYyBzZWFyY2hCYXI6IGJvb2xlYW47XG4gICAgcHVibGljIHBocmFzZTogc3RyaW5nO1xuICAgIHB1YmxpYyBtaW5pbWl6ZWQ6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhcmFtczogTW9kYWxEaWFsb2dQYXJhbXMpIHtcbiAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMucGFyYW1zLmNvbnRleHQuaXRlbXM7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aGlzLnBhcmFtcy5jb250ZXh0LnRpdGxlO1xuICAgICAgICB0aGlzLmtleSA9IHRoaXMucGFyYW1zLmNvbnRleHQua2V5O1xuICAgICAgICB0aGlzLnNlYXJjaEJhciA9IHRoaXMucGFyYW1zLmNvbnRleHQuc2VhcmNoQmFyO1xuICAgICAgICB0aGlzLm1pbmltaXplZCA9IHRoaXMucGFyYW1zLmNvbnRleHQubWluaW1pemVkO1xuICAgIH1cblxuICAgIHN1Ym1pdChyZXN1bHQsIGl0ZW06IGFueSkge1xuICAgICAgICB0aGlzLnBhcmFtcy5jbG9zZUNhbGxiYWNrKCB7cmVzdWx0OnJlc3VsdCwgZGF0YTogaXRlbX0gKTtcbiAgICB9XG5cbiAgICBmaWx0ZXJJdGVtcygpIHtcbiAgICAgICAgbGV0IGZpbHRlcmVkSXRlbXMgPSBbXTtcbiAgICAgICAgY29uc29sZS5sb2coJ2ZpbHRlcmluZycpO1xuICAgICAgICBpZih0aGlzLnBocmFzZSA9PSBcIlwiIHx8IHRoaXMucGhyYXNlID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZmlsdGVyZWRJdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZih0aGlzLml0ZW1zW3RoaXMua2V5XVtpXS50b1VwcGVyQ2FzZSgpLmluZGV4T2YodGhpcy5waHJhc2UudG9VcHBlckNhc2UoKSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZEl0ZW1zLnB1c2godGhpcy5pdGVtc1t0aGlzLmtleV1baV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyZWRJdGVtcztcbiAgICB9XG5cbiAgICBvblRleHRDaGFuZ2VkKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuZmlsdGVySXRlbXMoKTtcbiAgICB9XG5cbn1cbiJdfQ==