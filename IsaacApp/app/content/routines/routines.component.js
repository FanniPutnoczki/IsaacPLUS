"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("nativescript-angular/router");
var routines_service_1 = require("./routines.service");
var RoutinesComponent = /** @class */ (function () {
    function RoutinesComponent(routinesService, routerExtensions) {
        this.routinesService = routinesService;
        this.routerExtensions = routerExtensions;
        this.refresh();
    }
    RoutinesComponent.prototype.refresh = function () {
        var _this = this;
        console.info("refreshing routines");
        this.routines = [];
        this.connectionError = false;
        this.loadMask = false;
        this.routinesService.getRoutines().subscribe(function (r) {
            if (r == undefined) {
                _this.connectionError = true;
            }
            else {
                //console.log(r);
                _this.routines = r;
                _this.formatRoutines();
                _this.connectionError = false;
            }
            _this.loadMask = false;
        });
    };
    RoutinesComponent.prototype.formatRoutines = function () {
        for (var _i = 0, _a = this.routines; _i < _a.length; _i++) {
            var r = _a[_i];
            if (r.recurring) {
                var dis = "";
                var week = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
                for (var i = 0; i < 7; i++) {
                    if (r.days[i]) {
                        dis += (week[i] + ", ");
                    }
                }
                dis = dis.slice(0, -2);
                r.displayDate = dis;
            }
            else {
                var options = { year: '2-digit', month: 'short', day: 'numeric' };
                r.displayDate = new Date(r.date.year, r.date.month - 1, r.date.day).toLocaleDateString('en-US', options);
            }
            var t = new Date(0, 0, 0, r.time.hour, r.time.minute, 0);
            var displayTime = t.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }).split(' ')[0];
            var split = displayTime.split(":");
            r.displayTime = split[0] + ":" + split[1];
        }
    };
    RoutinesComponent.prototype.deleteRoutine = function (routine) {
        this.routinesService.deleteRoutine(routine._id.$oid).subscribe(function (r) {
            console.log(r);
            //TODO in case of error refresh and show message
        });
        var index = 0;
        for (var i = 0; i < this.routines.length; i++) {
            if (this.routines[i]._id.$oid === routine._id.$oid) {
                index = i;
                break;
            }
        }
        this.routines.splice(index, 1);
    };
    RoutinesComponent.prototype.editRoutine = function (routine) {
        this.routerExtensions.navigate(["/routines", routine._id.$oid], {
            transition: {
                name: "fade",
                duration: 500,
                curve: "easeIn"
            }
        });
    };
    RoutinesComponent.prototype.addRoutine = function () {
        console.log("settings button pushed");
        this.routerExtensions.navigate(["/routines", ""], {
            transition: {
                name: "fade",
                duration: 500,
                curve: "easeIn"
            }
        });
    };
    RoutinesComponent = __decorate([
        core_1.Component({
            selector: "routines",
            templateUrl: "./content/routines/routines.component.html"
        }),
        __metadata("design:paramtypes", [routines_service_1.RoutinesService,
            router_1.RouterExtensions])
    ], RoutinesComponent);
    return RoutinesComponent;
}());
exports.RoutinesComponent = RoutinesComponent;
//# sourceMappingURL=data:application/json;base64,